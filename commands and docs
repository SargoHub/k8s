0  The Kubernetes documentation to refer - 
https://kubernetes.io/

kubectl commands cheat sheet -
https://kubernetes.io/docs/reference/kubectl/quick-reference/

to validate the yaml file -
https://www.yamllint.com/


Installing Minikube - 
https://github.com/SargoHub/kubernetes_workshop_intellipaat/blob/main/minikube_Installtion_Oct2023.md


KUBECTL COMMANDS -

kubectl 
  to list all the kubectl verbs commands 
kubectl get nodes 
  to list the nodes of the cluster
kubectl get pods
  to list the pods running 
vi name.yaml
  for creating a pod using declerative way, we have to create the YAML file.
kubectl apply -f name.yaml 
  to create the object(POD in this case) using the yaml file
kubectl describe pod <podname>
  to see the details about the object
kubectl delete pod <podname>
  to delete the POD
vi myrs.yaml
  creating the yaml file for the replica set
kubectl apply -f myrs.yaml
  to create the replica set object
kubectl get rs
  to list the replica sets running
kubectl scale --replicas=5 replicaset <rs name>
  to scale the pods in the replica set
kubectl edit rs <rs name>
  to edit the replica set file ( a risky way of doing it )
vi myrs.yaml
  third way is to edit the yaml file itsef ( once edited you have to run the kubectl apply again )
kubectl delete rs <rs name>
  it will delete the replica-set 
vi mydep.yaml
  creating the yaml file for deployment object
kubectl get deployments.apps
  to list the running deployments
kubectl apply -f mydep.yaml
  to create the deployment object ( this will create a rs also by itself)
kubectl describe deployments.apps <deployment name>
  to show to the deployment's detailed description (like, container image version, no. of replicas etc )
kubectl edit deployments.apps <deployment name>
  ro edit the deployment file, no. of replicas
kubectl get pod --watch
  this is a live command which keeps on updating the pods list
kubectl set image deployment/<deployment name> nginx=nginx:1.16.1
  to update the image version in the deployment ( this will trigger the rolling update )
kubectl rollout status deployment/<deployment name>
  to check the status of the update rollout
kubectl rollout history deployment/<deployment name>
  to list the rollout revisions 
kubectl rollout history deployment/<deployment name> --revision=2
  to list the details of a specific rollout revision 
kubectl rollout undo deployment/<deployment name>
  to roll back to the previous version of the deployment ( the older POD version)
kubectl get pod -o wide 
  to see the IP address of the PODS running

AWS EKS CLUSTER -

kubectl get pod --show-labels
  to list pods along with their label details
kubectl get pod -l app=nginx
  to list pod having a specific label
kubectl label --overwrite pod <name> app=login
  to overwrite the label of a POD with something new
kubectl get pod -o wide 
  to check on which node the POD is running 
vi my-service.yaml
  created the YAML file for the service object
kubectl apply -f my-service.yaml
  to create the service
kubectl get service / kubectl get svc
  to list the services running 
kubectl describe svc <service name>
  to list the detail about a service 
kubectl get ep
  to list the endpoints created by a service
kubectl delete svc <service-name>
  to delete the service 


KUBERNETES VOLUMES -

These commands are run on the Ec2 using which we are managing the EKS cluster
kubectl get pv 
  to list the persistent volumes
kubectl get pvc
  to list the persitent volume claims
vi mypv.yaml
  create the PV (it has, capacity, access mode, persistenvolumereclaimpolicy, storage class, hostpath)
kubectl apply -f mypv.yaml
  to create the PV
kubectl get pv 
  to list the persistent volumes and see some details
vi mypvc.yaml
  to create a persistent volume claim 
kubectl apply -f mypvc.yaml
  to create the PVC
kubectl get pvc
  to list the persitent volume claims
vi mydep.yaml
  to create a Deployment file (in this yaml the pvc is called and also the vloume mount path in the container is given)
kubectl apply -f mydep.yaml
  to create the deployment object 
kubectl get pod 
  to get the pod created
kubectl exec -it <pod name> bash
  to connect to the pod
cd to the mount path to use the volume mounted


CONFIG MAP AND SECRET

vi mycm.yaml
  to create the yaml file for config map ( it has a data component where the data as key=value is passed)
kubectl apply -f mycm.yaml
  to apply the file and create the congifmap
kubectl get cm
  to list the configMap
kubectl describe cm <name> 
  to see the detail of the configMap

vi mysecret.yaml
  to create the secret 
kubectl apply -f mysecret.yaml
  to create the secret object
kubectl get secret
  to list the secret object
kubectl describe secret <name> 
  to see the details ( but in this case of secret the data passed is not visible)



  




















